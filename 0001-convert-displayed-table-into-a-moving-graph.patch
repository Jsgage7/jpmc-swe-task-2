From c166c7be08533091392cd4abef2ea3e76f956d41 Mon Sep 17 00:00:00 2001
From: jgage6 <jgage6@gatech.edu>
Date: Wed, 12 Jul 2023 18:17:52 -0400
Subject: [PATCH] convert displayed table into a moving graph

---
 src/App.tsx   | 18 ++++++++++++++++--
 src/Graph.tsx | 17 ++++++++++++++---
 2 files changed, 30 insertions(+), 5 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..9335c4c 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x = 0;
+    const interval = setInterval(() => {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ 
+        data: serverResponds,
+        showGraph: true,
+       });
     });
+    x++;
+    if (x > 1000) {
+      clearInterval(interval);
+    }
+    }, 100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..5ceac7e 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,8 +32,19 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    
+    // Setting more variables to be able to display chart
+    elem.setAttribute('view', 'y_line');
+    elem.setAttribute('column-pivots', '["stock"]');
+    elem.setAttribute('row-pivots', '["timestamp"]');
+    elem.setAttribute('columns', '["top_ask_price"]');
+    elem.setAttribute('aggregates',
+    `{"stock":"distinct count",
+     "top_ask_price":"avg",
+     "top_bid_price":"avg",
+     "timestamp":"distinct count"}`);
+     
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
-- 
2.37.2.windows.2

